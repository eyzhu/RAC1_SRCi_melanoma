if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ensembldb")
n
## load public datasets
siMITF_sk28 = read.csv("Verfaillie/sk28MITF_si_DEGs.csv", header=TRUE, stringsAsFactors = FALSE, skip = 1)
setwd("~/Documents/GitHub/RAC1_SRCi_melanoma/Figures_5_and_6")
## load public datasets
siMITF_sk28 = read.csv("data/Verfaillie/sk28MITF_si_DEGs.csv", header=TRUE, stringsAsFactors = FALSE, skip = 1)
siMITF_sk28 = read.csv("data/Verfaillie/sk28MITF_si_DEGs.csv", header=TRUE, stringsAsFactors = FALSE, skip = 1)
siMITF_sk28_down = unique(siMITF_sk28[siMITF_sk28[,"log2fc"]<0, "gene_symbol"])
siMITF_sk28_up = unique(siMITF_sk28[siMITF_sk28[,"log2fc"]>0, "gene_symbol"])
siMITF_501 = read.csv("data/Verfaillie/501MITF_si_DEGs.csv", header=TRUE, stringsAsFactors = FALSE, skip = 1)
siMITF_501_down = unique(siMITF_501[siMITF_501[,"log2"]<0, "gene_symbol"])
siMITF_501_up = unique(siMITF_501[siMITF_501[,"log2"]>0, "gene_symbol"])
oeMITF_a375 = read.csv("data/Verfaillie/a375MITF_OE_DEGs.csv", header=TRUE, stringsAsFactors = FALSE, skip = 1)
oeMITF_a375_up = unique(oeMITF_a375[oeMITF_a375[,"log2"]>0, "gene_symbol"])
oeMITF_a375_down = unique(oeMITF_a375[oeMITF_a375[,"log2"]<0, "gene_symbol"])
mitfChangeGenes = as.character(c(siMITF_sk28_down,siMITF_501_down,oeMITF_a375_up))
mitfGenesFreq = sort(table(mitfChangeGenes),decreasing = TRUE)
MITFregGenes = names(mitfGenesFreq[mitfGenesFreq>1])
mitfChangeGenesUp = as.character(c(siMITF_sk28_up, siMITF_501_up, oeMITF_a375_down))
mitfGenesFreqUp = sort(table(mitfChangeGenesUp),decreasing = TRUE)
## load MITF chip
sk28CutNrun = unique(read.csv("data/Verfaillie/sk28MITF_cutandrun.csv", stringsAsFactors = FALSE, skip = 1)[,"SYMBOL"])
mel501_chip = unique(read.csv("data/Verfaillie/501MITF_chip.csv", stringsAsFactors = FALSE, skip = 1)[,"SYMBOL"])
colo829chip = unique(read.csv("data/Verfaillie/colo829MITF_chip.csv", stringsAsFactors = FALSE, skip = 1)[,"SYMBOL"])
mitfchipTars = unique(c(sk28CutNrun, mel501_chip, colo829chip))
MITFregGenes_filt = MITFregGenes[MITFregGenes %in% mitfchipTars]
MITFregGenes_filt = unique(MITFregGenes_filt)
## load TEADs si datasets
hacData = read.csv("data/Verfaillie/hac_farie_data.csv", header = TRUE, stringsAsFactors = FALSE, skip=2)
hacAp1 = hacData[,"H3K27ac_AP1_target"] =="AP1"
hacTEAD = hacData[,"H3K27ac_TEAD_target"] =="TEAD"
farAp1 = hacData[,"FAIRE_AP1_target"] =="AP1"
teadGenes = unique(hacData[ hacTEAD, "gene_ID"])
ap1Genes =  unique(hacData[hacAp1 | farAp1 , "gene_ID"])
combGenes = unique(c(teadGenes, ap1Genes))
teadSidata = read.csv("tead_targets.csv", header=TRUE, skip = 3, stringsAsFactors = FALSE)
teadSidata = read.csv("tead_targets.csv", header=TRUE, skip = 3, stringsAsFactors = FALSE)
teadSidata = read.csv("data/Verfaillie/tead_targets.csv", header=TRUE, skip = 3, stringsAsFactors = FALSE)
proInvGenes = read.csv("data/Verfaillie/prolif_invasive_genes.csv", header=TRUE, stringsAsFactors = FALSE)
load("/Users/eliot/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Projects/Machine_learning/expression_analysis_CCLE.Rdata")
ls()
View(txi)
rm(list=ls())
load("/Users/eliot/Documents/GitHub/RAC1_SRCi_melanoma/Figures_5_and_6/data/CCLE/expression_analysis_CCLE.Rdata")
#
sampleLable = colnames(txi$abundance)
#
sampleLable = colnames(txi$abundance)
# myGroup = rep("", length(sampleLable))
# myGroup[1:6] = "WT"
# myGroup[7:length(myGroup)] = "MUT"
myGroup = sampleLable
sampInfo = data.frame(myGroup=myGroup)
rownames(sampInfo) = sampleLable
txi$abundance = txi$abundance[importGenes2,]
#
sampleLable = colnames(txi$abundance)
# myGroup = rep("", length(sampleLable))
# myGroup[1:6] = "WT"
# myGroup[7:length(myGroup)] = "MUT"
myGroup = sampleLable
sampInfo = data.frame(myGroup=myGroup)
rownames(sampInfo) = sampleLable
ddsTxi <- DESeqDataSetFromTximport(txi,
colData = sampInfo,
design = ~ 1)
library(Deseq2)
dds <- DESeq(ddsTxi)
library(deseq2)
library(DESeq2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
ddsTxi <- DESeqDataSetFromTximport(txi,
colData = sampInfo,
design = ~ 1)
dds <- DESeq(ddsTxi)
ntdCCLE = normTransform(dds)
normExpressionCCLE =  assay(ntdCCLE)
dim(normExpressionCCLE )
savesampleLable
sampleLable
save(normExpressionCCLE, file="DEseq2_norm_CCLE_Melanoma.Rdata")
#
# pheatmap(normExpression[c(rownames(upGenes), rownames(downGenes)), ])
#
# ## convert mouse genes to human genes
# genesV1 = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = upGenes , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
# upGenesHum <- unique(genesV1[, 2])
#
# genesV2 = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = downGenes , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
# downGenesHum <- unique(genesV2[, 2])
#
load("data/CCLE/DEseq2_norm_CCLE_Melanoma.Rdata")
normExpression_filt_CCLE = normExpressionCCLE[rowSums(normExpressionCCLE>0.5)>3,]
cellSens = get(load("data/CCLE/cell_line_drug_info.Rdata"))
sensCL = names(cellSens[cellSens<2])
ggplot2Dat = setNames(melt(t(LRexpr)[c(maxTead, maxMITF), c(names(clusts[clusts==1]), names(clusts[clusts==2])) ]), c('Genes', 'Samples', 'Expression'))
load("importGenes_c.Rdata")
load("/Users/eliot/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Projects/Rac1_biomarker/importGenes_c.Rdata")
rm(list=ls())
load("/Users/eliot/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Projects/Rac1_biomarker/importGenes_c.Rdata")
bortOut
clusts
clusts = clusts2
y = factor(clusts)
load("/Users/eliot/Documents/GitHub/RAC1_SRCi_melanoma/Figures_5_and_6/data/CCLE/cell_line_drug_info.Rdata")
# ccleSkin = ccleReads[, grep("SKIN", colnames(ccleReads))]
ccleSkin = ccleReads
rownames(ccleSkin) = sub("\\..*", "", rownames(ccleSkin))
# ccleSkin = ccleReads[, grep("SKIN", colnames(ccleReads))]
ccleSkin = ccleReads
#################
ccleReads = get(load("data/CCLE/ccle_reads.Rdata"))
# ccleSkin = ccleReads[, grep("SKIN", colnames(ccleReads))]
ccleSkin = ccleReads
rownames(ccleSkin) = sub("\\..*", "", rownames(ccleSkin))
lol2 = getBM(attributes= c("ensembl_gene_id", "hgnc_symbol"),
filters=c("ensembl_gene_id"),
values=rownames(ccleSkin), mart=ensembl)
library(biomaRt)
ccleReads = get(load("data/CCLE/ccle_reads.Rdata"))
# ccleSkin = ccleReads[, grep("SKIN", colnames(ccleReads))]
ccleSkin = ccleReads
rownames(ccleSkin) = sub("\\..*", "", rownames(ccleSkin))
lol2 = getBM(attributes= c("ensembl_gene_id", "hgnc_symbol"),
filters=c("ensembl_gene_id"),
values=rownames(ccleSkin), mart=ensembl)
ensembl=useMart("ensembl")
ensembl = useDataset("hsapiens_gene_ensembl", mart=ensembl)
lol2 = getBM(attributes= c("ensembl_gene_id", "hgnc_symbol"),
filters=c("ensembl_gene_id"),
values=rownames(ccleSkin), mart=ensembl)
lol2 = lol2[lol2[,2]!="", ]
dupGenes = lol2[ which(duplicated(lol2[,2])) , 2]
lol3 = lol2[ !(lol2[,2] %in% dupGenes), ]
ccleSkin = ccleSkin[rownames(ccleSkin) %in% lol3[,1],]
rownames(ccleSkin) = lol3[match(rownames(ccleSkin), lol3[,1]) ,2]
colData = data.frame(cellLine = colnames(ccleSkin))
rownames(colData) = colnames(ccleSkin)
dds = DESeqDataSetFromMatrix(countData = ccleSkin, colData = colData, design = ~ cellLine )
ntd = normTransform(dds)
normExpressionCCLE_final_Old_ALL =  assay(ntd)
dim(ccleReads)
ccleReads
save(normExpressionCCLE_final_Old_ALL, file="DEseq2_norm_CCLE_Melanoma_Counts")
save(normExpressionCCLE_final_Old_ALL, file="DEseq2_norm_CCLE_Melanoma_Counts.Rdata")
### roger lo pd1
rogerExp = read.csv("Data/Lo/Roger_lo_pd1.csv", header=TRUE, stringsAsFactors = FALSE)
### roger lo pd1
rogerExp = read.csv("data/Lo/Roger_lo_pd1.csv", header=TRUE, stringsAsFactors = FALSE)
brafSens = get(load("data/CCLE/cell_line_drug_info.Rdata"))
names(brafSens) = sub("_SKIN", "", names(brafSens))
brafSens
drugSensDat = data.frame(Sensitivity=brafSens, Subtype=clClusts[names(brafSens)])
drugSensDat$Subtype = factor(drugSensDat$Subtype, levels = c("De-diff", "Diff"))
drugSensDat = data.frame(Sensitivity=brafSens, Subtype=clClusts[names(brafSens)])
mat = read.csv("Tirosh_data.csv", header=TRUE, stringsAsFactors = FALSE)
mat = read.csv("data/Tirosh/Tirosh_data.csv", header=TRUE, stringsAsFactors = FALSE)
head(mat)
immuneScores = read.csv("data/Jerby-Arnon/ccle_immune_sig.csv", skip=2, stringsAsFactors = FALSE)
head(normExpressionCCLE_final_Old_ALL)
dim(normExpressionCCLE_final_Old_ALL)
normExpressionCCLE_final_Old_ALL[,grep("_SKIN", colnames(normExpressionCCLE_final_Old_ALL))]
dim(normExpressionCCLE_final_Old_ALL[,grep("_SKIN", colnames(normExpressionCCLE_final_Old_ALL))])
normExpressionCCLE_final_Old_ALL = dim(normExpressionCCLE_final_Old_ALL[,grep("_SKIN", colnames(normExpressionCCLE_final_Old_ALL))])
save(normExpressionCCLE_final_Old_ALL, file="DEseq2_norm_CCLE_Melanoma_Counts.Rdata")
